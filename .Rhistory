Development=NA,
Lecture=NA,
Exercise=NA,
Seminar_Excursion=NA,
Supervision=NA,
Total_GU=NA)
for(i in seq_along(teachers)){
fochrdf <- hrmat[grepl(teachers[i], te[,name_col]),]
fochrdf$activity_code <- factor(fochrdf$activity_code, levels=1:4)
hrsDF[i,4:7] <- tapply(fochrdf$hours, fochrdf$activity_code, sum)
hrsDF[i,8] <- sum(fochrdf$GU_hours) + admin_hours * teachers[i] %in% course_leader
}
hrsDF[is.na(hrsDF)] <- 0
# Give 40 admin hours to the course leader
message("Notes:")
message(ifelse(is.null(course_leader),
"No course leader identified so administration hours will not be assigned.",
paste("-",
admin_hours,
"hours will be assigned to",
course_leader,
"as course leader.")))
hrsDF[hrsDF$Teacher==course_leader, 'Administration'] <- admin_hours
# Warning about no development hours given by this program
message("- Development hours are not assigned by this program. Add these manually if needed and remember to update the GU hours.")
message(paste0("- Output file is written as '", outfile, "'"))
# Save output
if(grepl(".xls", outfile)){
writexl::write_xlsx(hrsDF, outfile)
}
if(grepl(".csv", outfile)){
write.csv(hrsDF, outfile, row.names = F)
}
}
get_course_codes(infile=infile,
test_course_leader=FALSE)
get_course_codes(infile=infile,
test_course_leader=FALSE)
head(as.data.frame(readxl::read_xlsx(paste0("demo/Compilation/Compiled_", basename(infile)))), 10)
head(as.data.frame(readxl::read_xlsx(paste0("/Compilation/Compiled_", basename(infile)))), 10)
head(as.data.frame(readxl::read_xlsx(paste0("Compilation/Compiled_", basename(infile)))), 10)
getwd()
compile_teacher_tables(inpath="demo/Teachers_for_review",
outpath="demo/",
original_TE_file="demo/OG_data/TimeEdit_2023-12-20_13_20.RDA")
infile="demo/TimeEdit_2023-12-20_13_20.xlsx"
get_course_codes(infile=infile,
test_course_leader=FALSE)
course_list <- readxl::read_xlsx(paste0(dirname(infile), "/Course_list_", basename(infile)))
count_hours_multi(infile=infile,
outpath="demo/",
course_leaders=course_list$course_leader,
course_codes=course_list$code,
exclude_no_teacher=TRUE,
admin_hours=40)
count_hours_teachers(inpath="demo/Courses_for_review/",
outpath="demo/",
original_TE_file="demo/OG_data/TimeEdit_2023-12-20_13_20.RDA")
count_hours_teachers(inpath="demo/Courses_for_review/",
outpath="demo/",
original_TE_file="demo/OG_data/TimeEdit_2023-12-20_13_20.RDA")
compile_teacher_tables(inpath="demo/Teachers_for_review",
outpath="demo/",
original_TE_file="demo/OG_data/TimeEdit_2023-12-20_13_20.RDA")
head(as.data.frame(readxl::read_xlsx(paste0("demo/Compilation/Compiled_", basename(infile)))), 10)
plot(1,1, pch=NA, axes=F, xlab="Temporal scale", ylab="Spatial scale")
axis(1, labels=F)
axis(2, labels=F)
legend("topright", legend=c("Automated sensors",
"Field census",
"UAV-based remote sensing",
"Dendrochronology",
"Simulation modeling"), pch=21, pt.bg=c("grey",
"yellow",
"pink",
"darkblue",
"forestgreen"), bty='n', pt.cex=2)
url <- "https://raw.githubusercontent.com/bobmuscarella/EBC-Teaching-Hours-Calculator/master/"
source(paste0(url, "count_hours_multi.R"))
source(paste0(url, "count_hours_teachers.R"))
source(paste0(url, "get_course_codes.R"))
source(paste0(url, "compile_from_teacher_tables.R"))
# Set the infile as the .xlsx file downloaded from TimeEdit.
infile="/Users/au529793/Projects/GIT/EBC-Teaching-Hours-Calculator/p3-2023/TimeEdit_2024-03-15_10_02.xlsx"
# Set the infile as the .xlsx file downloaded from TimeEdit.
infile <- "/Users/au529793/Projects/GIT/EBC-Teaching-Hours-Calculator/p3-2023/TimeEdit_2024-03-15_10_02.xlsx"
# Run the function
get_course_codes(infile, test_course_leader=T)
# Read in the file produced in the last step (after adding course leaders)
course_list <- readxl::read_xlsx(paste0(dirname(infile), "/Course_list_", basename(infile)))
course_list
count_hours_multi(infile=infile,
outpath="/Users/au529793/Projects/GIT/EBC-Teaching-Hours-Calculator/p3-2022/",
course_leaders=course_list$course_leader,
course_codes=course_list$code,
exclude_no_teacher=TRUE,
admin_hours=40)
count_hours_multi(infile=infile,
outpath="/Users/au529793/Projects/GIT/EBC-Teaching-Hours-Calculator/p3-2023/",
course_leaders=course_list$course_leader,
course_codes=course_list$code,
exclude_no_teacher=TRUE,
admin_hours=40)
count_hours_teachers(inpath="demo/Courses_for_review/",
outpath="demo/",
original_TE_file="demo/OG_data/TimeEdit_2024-02-13_13_10.RDA")
count_hours_teachers
count_hours_teachers(inpath="demo/Courses_for_review/",
outpath="demo/",
original_TE_file="demo/OG_data/TimeEdit_2024-02-13_13_10.RDA")
count_hours_teachers(inpath="/Users/au529793/Projects/GIT/EBC-Teaching-Hours-Calculator/p3-2023/Courses_for_review/",
outpath="/Users/au529793/Projects/GIT/EBC-Teaching-Hours-Calculator/p3-2023/",
original_TE_file="/Users/au529793/Projects/GIT/EBC-Teaching-Hours-Calculator/p3-2023/OG_data/TimeEdit_2024-03-15_10_02.RDA")
getwd()
# 4. Count hours teachers
count_hours_teachers(inpath="p3-2023/Courses_for_review/",
outpath="p3-2023/",
original_TE_file="p3-2023/OG_data/TimeEdit_2024-03-15_10_02.RDA")
count_hours_teachers
### TEST THE FUNCTION
compile_teacher_tables(inpath="p3-2023/Teachers_for_review",
outpath="p3-2023/",
original_TE_file="p3-2023/OG_data/TimeEdit_2024-03-15_10_02.RDA")
# Set the infile as the .xlsx file downloaded from TimeEdit.
infile <- "/Users/au529793/Projects/GIT/EBC-Teaching-Hours-Calculator/p3-2023/TimeEdit_2024-03-15_10_02.xlsx"
# Run the function
get_course_codes(infile, test_course_leader=T)
# Read in the file produced in the last step (after adding course leaders)
course_list <- readxl::read_xlsx(paste0(dirname(infile), "/Course_list_", basename(infile)))
count_hours_multi(infile=infile,
outpath="/Users/au529793/Projects/GIT/EBC-Teaching-Hours-Calculator/p3-2023/",
course_leaders=course_list$course_leader,
course_codes=course_list$code,
exclude_no_teacher=TRUE,
admin_hours=40)
# 4. Count hours teachers
count_hours_teachers(inpath="p3-2023/Courses_for_review/",
outpath="p3-2023/",
original_TE_file="p3-2023/OG_data/TimeEdit_2024-03-15_10_02.RDA")
### TEST THE FUNCTION
compile_teacher_tables(inpath="p3-2023/Teachers_for_review",
outpath="p3-2023/",
original_TE_file="p3-2023/OG_data/TimeEdit_2024-03-15_10_02.RDA")
# Set the infile as the .xlsx file downloaded from TimeEdit.
infile <- "/Users/au529793/Projects/GIT/EBC-Teaching-Hours-Calculator/p2-2023/TimeEdit_2024-03-15_19_22.xlsx"
# Run the function
get_course_codes(infile, test_course_leader=T)
# Read in the file produced in the last step (after adding course leaders)
course_list <- readxl::read_xlsx(paste0(dirname(infile), "/Course_list_", basename(infile)))
count_hours_multi(infile=infile,
outpath="/Users/au529793/Projects/GIT/EBC-Teaching-Hours-Calculator/p3-2023/",
course_leaders=course_list$course_leader,
course_codes=course_list$code,
exclude_no_teacher=TRUE,
admin_hours=40)
count_hours_teachers(inpath="/Users/au529793/Projects/GIT/EBC-Teaching-Hours-Calculator/p2-2022/Courses_for_review/",
outpath="/Users/au529793/Projects/GIT/EBC-Teaching-Hours-Calculator/p2-2022/",
original_TE_file="/Users/au529793/Projects/GIT/EBC-Teaching-Hours-Calculator/p2-2022/OG_data/P2-2022.RDA")
# Read in the file produced in the last step (after adding course leaders)
course_list <- readxl::read_xlsx(paste0(dirname(infile), "/Course_list_", basename(infile)))
count_hours_multi(infile=infile,
outpath="/Users/au529793/Projects/GIT/EBC-Teaching-Hours-Calculator/p2-2022/",
course_leaders=course_list$course_leader,
course_codes=course_list$code,
exclude_no_teacher=TRUE,
admin_hours=40)
# Set the infile as the .xlsx file downloaded from TimeEdit.
infile <- "/Users/au529793/Projects/GIT/EBC-Teaching-Hours-Calculator/p2-2023/TimeEdit_2024-03-15_19_22.xlsx"
# Read in the file produced in the last step (after adding course leaders)
course_list <- readxl::read_xlsx(paste0(dirname(infile), "/Course_list_", basename(infile)))
count_hours_multi(infile=infile,
outpath="/Users/au529793/Projects/GIT/EBC-Teaching-Hours-Calculator/p2-2023/",
course_leaders=course_list$course_leader,
course_codes=course_list$code,
exclude_no_teacher=TRUE,
admin_hours=40)
# Set the infile as the .xlsx file downloaded from TimeEdit.
infile <- "/Users/au529793/Projects/GIT/EBC-Teaching-Hours-Calculator/p3-2023/TimeEdit_2024-03-15_19_22.xlsx"
# Read in the file produced in the last step (after adding course leaders)
course_list <- readxl::read_xlsx(paste0(dirname(infile), "/Course_list_", basename(infile)))
# Set the infile as the .xlsx file downloaded from TimeEdit.
infile <- "/Users/au529793/Projects/GIT/EBC-Teaching-Hours-Calculator/p3-2023/TimeEdit_2024-03-15_10_02.xlsx"
# Read in the file produced in the last step (after adding course leaders)
course_list <- readxl::read_xlsx(paste0(dirname(infile), "/Course_list_", basename(infile)))
course_list
count_hours_multi(infile=infile,
outpath="/Users/au529793/Projects/GIT/EBC-Teaching-Hours-Calculator/p3-2023/",
course_leaders=course_list$course_leader,
course_codes=course_list$code,
exclude_no_teacher=TRUE,
admin_hours=40)
url <- "https://raw.githubusercontent.com/bobmuscarella/EBC-Teaching-Hours-Calculator/master/"
source(paste0(url, "count_hours_multi.R"))
source(paste0(url, "count_hours_teachers.R"))
source(paste0(url, "get_course_codes.R"))
source(paste0(url, "compile_from_teacher_tables.R"))
# Set the infile as the .xlsx file downloaded from TimeEdit.
infile <- "/Users/au529793/Projects/GIT/EBC-Teaching-Hours-Calculator/2023-P2/TimeEdit_2024-03-15_19_22.xlsx"
# Run the function
get_course_codes(infile, test_course_leader=T)
# Run the function
get_course_codes(infile)
# Read in the file produced in the last step (after adding course leaders)
course_list <- readxl::read_xlsx(paste0(dirname(infile), "/Course_list_", basename(infile)))
course_list
count_hours_multi(infile=infile,
outpath="/Users/au529793/Projects/GIT/EBC-Teaching-Hours-Calculator/2023-P2/",
course_leaders=course_list$course_leader,
course_codes=course_list$code,
exclude_no_teacher=TRUE,
admin_hours=40)
# Set the infile as the .xlsx file downloaded from TimeEdit.
infile <- "/Users/au529793/Projects/GIT/EBC-Teaching-Hours-Calculator/2023-P2/TimeEdit_2024-03-15_10_02.xlsx"
# Read in the file produced in the last step (after adding course leaders)
course_list <- readxl::read_xlsx(paste0(dirname(infile), "/Course_list_", basename(infile)))
course_list
# Set the infile as the .xlsx file downloaded from TimeEdit.
infile <- "/Users/au529793/Projects/GIT/EBC-Teaching-Hours-Calculator/2024-P3/TimeEdit_2024-03-15_10_02.xlsx"
# Read in the file produced in the last step (after adding course leaders)
course_list <- readxl::read_xlsx(paste0(dirname(infile), "/Course_list_", basename(infile)))
course_list
# Read in the file produced in the last step (after adding course leaders)
course_list <- readxl::read_xlsx(paste0(dirname(infile), "/Course_list_", basename(infile)))
course_list
# Read in the file produced in the last step (after adding course leaders)
course_list <- readxl::read_xlsx(paste0(dirname(infile), "/Course_list_", basename(infile)))
count_hours_multi(infile=infile,
outpath="/Users/au529793/Projects/GIT/EBC-Teaching-Hours-Calculator/2024-P3/",
course_leaders=course_list$course_leader,
course_codes=course_list$code,
exclude_no_teacher=TRUE,
admin_hours=40)
# Set the infile as the .xlsx file downloaded from TimeEdit.
infile <- "/Users/au529793/Projects/GIT/EBC-Teaching-Hours-Calculator/2024-P3/TimeEdit_2024-03-15_10_02.xlsx"
# Read in the file produced in the last step (after adding course leaders)
course_list <- readxl::read_xlsx(paste0(dirname(infile), "/Course_list_", basename(infile)))
course_list
count_hours_multi(infile=infile,
outpath="/Users/au529793/Projects/GIT/EBC-Teaching-Hours-Calculator/2024-P3/test/",
course_leaders=course_list$course_leader,
course_codes=course_list$code,
exclude_no_teacher=TRUE,
admin_hours=40)
url <- "https://raw.githubusercontent.com/bobmuscarella/EBC-Teaching-Hours-Calculator/master/"
source(paste0(url, "count_hours_multi.R"))
source(paste0(url, "count_hours_teachers.R"))
source(paste0(url, "get_course_codes.R"))
source(paste0(url, "compile_from_teacher_tables.R"))
count_hours_multi(infile=infile,
outpath="/Users/au529793/Projects/GIT/EBC-Teaching-Hours-Calculator/2024-P3/test/",
course_leaders=course_list$course_leader,
course_codes=course_list$code,
exclude_no_teacher=TRUE,
admin_hours=40)
data <- readRDS("2024-P3/test/TimeEdit_2024-03-15_10_02.RDA")
data <- readRDS("2024-P3/test/OG_Data/TimeEdit_2024-03-15_10_02.RDA")
data
data$1BG383
data$`1BG383`
count_hours_multi
infile="/Users/au529793/Projects/GIT/EBC-Teaching-Hours-Calculator/2024-P3/TimeEdit_2024-03-15_10_02.xlsx"
outpath="/Users/au529793/Projects/GIT/EBC-Teaching-Hours-Calculator/2024-P3/test/"
course_list <- readxl::read_xlsx(paste0(dirname(infile), "/Course_list_", basename(infile)))
course_leaders=course_list$course_leader
course_codes=course_list$code
exclude_no_teacher=TRUE
admin_hours=40
# Read the input file (exclude first 5 rows header)
teall <- as.data.frame(readxl::read_excel(infile, skip=5))
teall$Course
teall$Course=='Modelling in Biology'
teall[teall$Course=='Modelling in Biology',]
teall[teall$Course %in% 'Modelling in Biology',]
course_codes
seq_along(course_codes)
i=6
# Subset the i course
te <- teall[grepl(course_codes[i], teall$`Course signatur`),]
te
# Exclude last extra rows
te <- te[!is.na(te[,3]),]
te
# Identify the column with teacher names
name_col <- names(te)[which(tolower(names(te)) %in% c("teacher", "staff", "personal"))]
name_col
if(exclude_no_teacher){
# Remove lines with no teacher assigned
te <- te[!is.na(te[,name_col]),]
}else{
# Assign "No teacher" to moments with no teacher assigned ()
te[,name_col][is.na(te[,name_col])] <- "No teacher"
}
te
# Round activity hours to nearest 0.5 (e.g., 45 min sessions get 1 hour)
te$Length <- strptime(te$`End time`, format='%H:%M') - strptime(te$`Begin time`, format='%H:%M')
te$hours <- plyr::round_any(as.numeric(te$Length)/60, 1, ceiling)
te$Length
te$hours
te
te$Length
as.numeric(te$Length)
as.numeric(te$Length)/60
te$Length
minutes(te$Length)
as.minutes(te$Length)
te$Length
difftime(te$Length)
strptime
strptime(te$`End time`, format='%H:%M', units="minutes")
te$`End time`
te$`End time`+10
te$Length
te$Length+0.2
i
i=7
# Subset the i course
te <- teall[grepl(course_codes[i], teall$`Course signatur`),]
# Exclude last extra rows
te <- te[!is.na(te[,3]),]
# Identify the column with teacher names
name_col <- names(te)[which(tolower(names(te)) %in% c("teacher", "staff", "personal"))]
# Round activity hours to nearest 0.5 (e.g., 45 min sessions get 1 hour)
te$Length <- strptime(te$`End time`, format='%H:%M') - strptime(te$`Begin time`, format='%H:%M')
te$Length
as.numeric(te$Length)
as.numeric(te$Length)/60
te$hours
i
i=6
# Subset the i course
te <- teall[grepl(course_codes[i], teall$`Course signatur`),]
# Exclude last extra rows
te <- te[!is.na(te[,3]),]
# Identify the column with teacher names
name_col <- names(te)[which(tolower(names(te)) %in% c("teacher", "staff", "personal"))]
if(exclude_no_teacher){
# Remove lines with no teacher assigned
te <- te[!is.na(te[,name_col]),]
}else{
# Assign "No teacher" to moments with no teacher assigned ()
te[,name_col][is.na(te[,name_col])] <- "No teacher"
}
# Round activity hours to nearest 0.5 (e.g., 45 min sessions get 1 hour)
te$Length <- strptime(te$`End time`, format='%H:%M') - strptime(te$`Begin time`, format='%H:%M')
te$hours <- plyr::round_any(as.numeric(te$Length)/60, 1, ceiling)
te$Length
te$hours
as.numeric(te$Length)/60
i=7
# Subset the i course
te <- teall[grepl(course_codes[i], teall$`Course signatur`),]
# Exclude last extra rows
te <- te[!is.na(te[,3]),]
# Identify the column with teacher names
name_col <- names(te)[which(tolower(names(te)) %in% c("teacher", "staff", "personal"))]
if(exclude_no_teacher){
# Remove lines with no teacher assigned
te <- te[!is.na(te[,name_col]),]
}else{
# Assign "No teacher" to moments with no teacher assigned ()
te[,name_col][is.na(te[,name_col])] <- "No teacher"
}
# Round activity hours to nearest 0.5 (e.g., 45 min sessions get 1 hour)
te$Length <- strptime(te$`End time`, format='%H:%M') - strptime(te$`Begin time`, format='%H:%M')
te
te$Length
as.numeric(te$Length)
as.numeric(te$Length)/60
plyr::round_any(as.numeric(te$Length)/60, 1, ceiling)
te$Length
difftime(te$Length, units = "mins")
te$Length
class(te$Length)
difftime(strptime(te$`End time`, format='%H:%M'),
strptime(te$`Begin time`, format='%H:%M'),
units = "mins")
i
i=6
i
# Subset the i course
te <- teall[grepl(course_codes[i], teall$`Course signatur`),]
# Exclude last extra rows
te <- te[!is.na(te[,3]),]
# Identify the column with teacher names
name_col <- names(te)[which(tolower(names(te)) %in% c("teacher", "staff", "personal"))]
if(exclude_no_teacher){
# Remove lines with no teacher assigned
te <- te[!is.na(te[,name_col]),]
}else{
# Assign "No teacher" to moments with no teacher assigned ()
te[,name_col][is.na(te[,name_col])] <- "No teacher"
}
# Round activity hours to nearest 0.5 (e.g., 45 min sessions get 1 hour)
te$Length <- strptime(te$`End time`, format='%H:%M') - strptime(te$`Begin time`, format='%H:%M')
difftime(strptime(te$`End time`, format='%H:%M'),
strptime(te$`Begin time`, format='%H:%M'),
units = "mins")
# Round activity hours to nearest 0.5 (e.g., 45 min sessions get 1 hour)
te$Length <- strptime(te$`End time`, format='%H:%M') - strptime(te$`Begin time`, format='%H:%M')
te$Length <- difftime(strptime(te$`End time`, format='%H:%M'),
strptime(te$`Begin time`, format='%H:%M'),
units = "mins")
te$Length
te$hours <- plyr::round_any(as.numeric(te$Length)/60, 1, ceiling)
te$hours
# Get the activity for each session
te$activity <- tolower(te[,grep("Reason|Moment", colnames(te))])
te$multiplier <- as.numeric(dplyr::case_when(
grepl('lecture|föreläsning', te$activity) ~ "4",
grepl('exercise|lab|övning', te$activity) ~ "2",
grepl('excursion|field|seminar|exkursion|fältkurs|seminarium', te$activity) ~ "1.5",
grepl('exam|presentation|supervision|tentamen|övervakning', te$activity) ~ "1"))
te$activity_code <- as.numeric(dplyr::case_when(
grepl('lecture|föreläsning', te$activity) ~ "1",
grepl('exercise|lab|övning', te$activity) ~ "2",
grepl('excursion|field|seminar|exkursion|fältkurs|seminarium', te$activity) ~ "3",
grepl('exam|presentation|supervision|tentamen|övervakning', te$activity) ~ "4"))
if(any(is.na(te$multiplier))){
base::message(paste("Warning: Activity type is not recognized in the 'Reason/Moment' column.
Specifically in the following row(s) from the input spreadsheet from TimeEdit:"))
mat <- data.frame(Date=te$`Begin date`[which(is.na(te$multiplier))],
Start_time=te$`Begin time`[which(is.na(te$multiplier))],
Activity=te$Reason[which(is.na(te$multiplier))],
Teacher=te[,name_col][which(is.na(te$multiplier))])
print(mat)
base::message("If assigned to a teacher, these hours have been multiplied by 1 and counted as 'Supervision'. To ensure the correct multiplier, use one of these labels in the 'Reason/Moment' column:
- lecture / föreläsning (x 4)
- exercise / lab / övning (x 2)
- excursion / seminar / exkursion / fältkurs / seminarium (x 1.5)
- exam / presentation / supervision / tentamen / övervakning (x 1)\n")
}
print(mat)
te$multiplier[is.na(te$multiplier)] <- 1
levels(te$activity_code) <- 1:4
te$activity_code[is.na(te$activity_code)] <- 4
hrmat <- te[,c('activity','activity_code','hours','multiplier')]
hrmat$GU_hours <- hrmat$multiplier * hrmat$hours
# Make a list of all teachers
teachers <- sort(unique(c(course_leaders[i], unlist(strsplit(te[,name_col], ', ')))))
# Count hours per teacher per activity
hrsDF <- data.frame(Teacher=teachers,
Administration=NA,
Development=NA,
Lecture=NA,
Exercise=NA,
Seminar_Excursion=NA,
Supervision=NA,
Total_GU=NA)
hrsDF
for(tch in seq_along(teachers)){
fochrdf <- hrmat[grepl(teachers[tch], te[,name_col]),]
fochrdf$activity_code <- factor(fochrdf$activity_code, levels=1:4)
hrsDF[tch,4:7] <- tapply(fochrdf$hours, fochrdf$activity_code, sum)
hrsDF[tch,8] <- sum(fochrdf$GU_hours) + admin_hours * teachers[tch] %in% course_leaders[i]
}
hrsDF[is.na(hrsDF)] <- 0
hrsDF
te
hrmat
hrsDF
url <- "https://raw.githubusercontent.com/bobmuscarella/EBC-Teaching-Hours-Calculator/master/"
source(paste0(url, "count_hours_multi.R"))
count_hours_multi()
count_hours_multi
count_hours_multi(infile=infile,
outpath="/Users/au529793/Projects/GIT/EBC-Teaching-Hours-Calculator/2024-P3/test/",
course_leaders=course_list$course_leader,
course_codes=course_list$code,
exclude_no_teacher=TRUE,
admin_hours=40)
url <- "https://raw.githubusercontent.com/bobmuscarella/EBC-Teaching-Hours-Calculator/master/"
source(paste0(url, "count_hours_multi.R"))
source(paste0(url, "count_hours_teachers.R"))
source(paste0(url, "get_course_codes.R"))
source(paste0(url, "compile_from_teacher_tables.R"))
# Set the infile as the .xlsx file downloaded from TimeEdit.
infile <- "/Users/au529793/Projects/GIT/EBC-Teaching-Hours-Calculator/2023-P2/TimeEdit_2024-03-15_19_22.xlsx"
# Read in the file produced in the last step (after adding course leaders)
course_list <- readxl::read_xlsx(paste0(dirname(infile), "/Course_list_", basename(infile)))
course_list
count_hours_multi(infile=infile,
outpath="/Users/au529793/Projects/GIT/EBC-Teaching-Hours-Calculator/2023-P2/",
course_leaders=course_list$course_leader,
course_codes=course_list$code,
exclude_no_teacher=TRUE,
admin_hours=40)
url <- "https://raw.githubusercontent.com/bobmuscarella/EBC-Teaching-Hours-Calculator/master/"
source(paste0(url, "count_hours_multi.R"))
source(paste0(url, "count_hours_teachers.R"))
source(paste0(url, "get_course_codes.R"))
source(paste0(url, "compile_from_teacher_tables.R"))
# Set the infile as the .xlsx file downloaded from TimeEdit.
infile <- "/Users/au529793/Projects/GIT/EBC-Teaching-Hours-Calculator/2023-P2/TimeEdit_2024-03-15_19_22.xlsx"
# Read in the file produced in the last step (after adding course leaders)
course_list <- readxl::read_xlsx(paste0(dirname(infile), "/Course_list_", basename(infile)))
count_hours_multi(infile=infile,
outpath="/Users/au529793/Projects/GIT/EBC-Teaching-Hours-Calculator/2023-P2/",
course_leaders=course_list$course_leader,
course_codes=course_list$code,
exclude_no_teacher=TRUE,
admin_hours=40)
# Set the infile as the .xlsx file downloaded from TimeEdit.
infile <- "/Users/au529793/Projects/GIT/EBC-Teaching-Hours-Calculator/2023-P2/TimeEdit_2024-03-15_19_22.xlsx"
# Read in the file produced in the last step (after adding course leaders)
course_list <- readxl::read_xlsx(paste0(dirname(infile), "/Course_list_", basename(infile)))
course_list
count_hours_multi(infile=infile,
outpath="/Users/au529793/Projects/GIT/EBC-Teaching-Hours-Calculator/2023-P2/",
course_leaders=course_list$course_leader,
course_codes=course_list$code,
exclude_no_teacher=TRUE,
admin_hours=40)
