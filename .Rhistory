source(paste0(url, "count_hours_multi.R"))
source(paste0(url, "count_hours_teachers.R"))
source(paste0(url, "compile_from_teacher_tables.R"))
# Set the infile as the .xlsx file downloaded from TimeEdit.
list.files("2024-P2")
infile <- "2024-P2/TimeEdit_2025-02-24_16_19.xlsx"
# Run the function
get_course_codes(infile)
# Read in the file produced in the last step (after adding course leaders)
course_list <- readxl::read_xlsx(paste0(dirname(infile), "/Course_list_", basename(infile)))
count_hours_multi(infile=infile,
outpath="2024-P2/",
course_leaders=course_list$course_leader,
course_codes=course_list$code,
exclude_no_teacher=TRUE,
admin_hours=40)
# Demo script for 2024-P2
library(officer)
library(flextable)
# 0. source the functions
url <- "https://raw.githubusercontent.com/bobmuscarella/EBC-Teaching-Hours-Calculator/master/Functions/"
source(paste0(url, "get_course_codes.R"))
source(paste0(url, "count_hours_multi.R"))
source(paste0(url, "count_hours_teachers.R"))
source(paste0(url, "compile_from_teacher_tables.R"))
# Set the infile as the .xlsx file downloaded from TimeEdit.
list.files("2024-P2")
infile <- "2024-P2/TimeEdit_2025-02-24_16_19.xlsx"
# 4. Count hours teachers
count_hours_teachers(inpath="2024-P2/Courses_for_review-edited/",
outpath="2024-P2/",
original_TE_file=list.files("2024-P2/OG_data", full.names=T))
# 4b. Get teacher list for email
# Get full IEG staff list
ieg <- readxl::read_xlsx("Staff lists/IEG staff list 20250505.xlsx", skip=2)
# 4. Count hours teachers
count_hours_teachers(inpath="2024-P2/Courses_for_review-edited/",
outpath="2024-P2/",
original_TE_file=list.files("2024-P2/OG_data", full.names=T))
# 4. Count hours teachers
count_hours_teachers(inpath="2024-P2/Courses_for_review-edited/",
outpath="2024-P2/",
original_TE_file=list.files("2024-P2/OG_data", full.names=T))
# 4b. Get teacher list for email
# Get full IEG staff list
ieg <- readxl::read_xlsx("Staff lists/IEG staff list 20250505.xlsx", skip=2)
ieg <- ieg[rowSums(is.na(ieg))==0 & ieg$Namn!="Namn",]
ieg
# 4b. Get teacher list for email
# Get full IEG staff list
ieg <- readxl::read_xlsx("Staff lists/IEG staff list 20250505.xlsx", skip=1)
ieg
# 4b. Get teacher list for email
# Get full IEG staff list
ieg <- readxl::read_xlsx("Staff lists/IEG staff list 20250505.xlsx", skip=0)
ieg
# 4b. Get teacher list for email
# Get full IEG staff list
ieg <- readxl::read_xlsx("Staff lists/IEG staff list 20250505.xlsx", skip=0)
ieg <- ieg[rowSums(is.na(ieg))==0 & ieg$Namn!="Namn",]
ieg
ieg$names <- sapply(strsplit(ieg$Namn, split=",."),function(x) {
paste(rev(x),collapse=" ")
})
ieg
ieg$names
ieg$names
ieg$names <- sapply(strsplit(ieg$Namn, split=",."),function(x) {
paste((x),collapse=" ")
})
ieg$names
ieg$Namn
ieg
head(ieg)
head(as.data.frame(ieg))
contact <- data.frame(name=teachers,
ieg=teachers %in% ieg$names,
email=ieg$Epostadress[match(teachers, ieg$names)])
# Get list of teachers from period of interest
teachers <- gsub(".xlsx", "", list.files("2024-P2/Teachers_for_review"))
ieg$names <- gsub("í", "i", ieg$names)
ieg <- ieg[order(ieg$names),]
ieg
contact <- data.frame(name=teachers,
ieg=teachers %in% ieg$names,
email=ieg$Epostadress[match(teachers, ieg$names)])
setwd("~/Projects/GIT/legenDNAry")
lfdp23 <- readRDS("Raw_data/LFDP2023-extract-v2-20240427-gOTUs.RDA")
lfdp23
lfdp23$total_abund
sum(lfdp23$total_abund)
setwd("~/Projects/GIT/EBC-Teaching-Hours-Calculator")
# 4b. Get teacher list for email
# Get full IEG staff list
ieg <- readxl::read_xlsx("Staff lists/IEG staff list 20250306.xlsx", skip=2)
ieg
ieg <- ieg[rowSums(is.na(ieg))==0 & ieg$Namn!="Namn",]
ieg$names <- sapply(strsplit(ieg$Namn, split=",."),function(x) {
paste(rev(x),collapse=" ")
})
ieg
# Get list of teachers from period of interest
teachers <- gsub(".xlsx", "", list.files("2024-P2/Teachers_for_review"))
ieg$names <- gsub("í", "i", ieg$names)
ieg <- ieg[order(ieg$names),]
contact <- data.frame(name=teachers,
ieg=teachers %in% ieg$names,
email=ieg$Epostadress[match(teachers, ieg$names)])
contact$email[contact$name=="Veera Tuovinen Nogerius"]
contact$name
contact$email
contact
teachers
# Get list of teachers from period of interest
teachers <- gsub(".xlsx", "", list.files("2024-P2/Teachers_for_review"))
teachers
list.files("2024-P2/Teachers_for_review")
# 4. Count hours teachers
count_hours_teachers(inpath="2024-P2/Courses_for_review-edited/",
outpath="2024-P2/",
original_TE_file=list.files("2024-P2/OG_data", full.names=T))
# Get list of teachers from period of interest
teachers <- gsub(".xlsx", "", list.files("2024-P2/Teachers_for_review"))
ieg$names <- gsub("í", "i", ieg$names)
ieg <- ieg[order(ieg$names),]
contact <- data.frame(name=teachers,
ieg=teachers %in% ieg$names,
email=ieg$Epostadress[match(teachers, ieg$names)])
contact
contact$ieg
contact$name[contact$ieg & is.na(contact$email)]
contact$email[contact$name=="Veera Tuovinen Nogerius"]
contact$name
contact$name=="Veera Tuovinen Nogerius"
contact$email[contact$name=="Veera Tuovinen Nogerius"]
contact[contact$name=="Veera Tuovinen Nogerius",]
contact
# Some old corrections...
contact$email[contact$name=="Veera Tuovinen Nogerius"] <- "veera.nogerius@ebc.uu.se"
contact$email[contact$name=="Ioana Onut Brännström"] <- "ioana.brannstrom@ebc.uu.se"
contact$email[contact$name=="Johanna Liljestrand Rönn"] <- "johanna.liljestrand-ronn@ebc.uu.se"
contact
contact[is.na(contact$email)]
contact[is.na(contact$email),]
contact$email[contact$name=="Ioana Brännström"] <- "ioana.brannstrom@ebc.uu.se"
contact$email[contact$name=="Aleix Palahí i Torres"] <- "aleix.palahi@ebc.uu.se"
# Some old corrections...
contact$email[contact$name=="Veera Tuovinen Nogerius"] <- "veera.nogerius@ebc.uu.se"
contact$email[contact$name=="Veera Nogerius"] <- "veera.nogerius@ebc.uu.se"
contact$email[contact$name=="Ioana Brännström"] <- "ioana.brannstrom@ebc.uu.se"
contact$email[contact$name=="Ioana Onut Brännström"] <- "ioana.brannstrom@ebc.uu.se"
contact$email[contact$name=="Johanna Liljestrand Rönn"] <- "johanna.liljestrand-ronn@ebc.uu.se"
contact$email[contact$name=="Aleix Palahí i Torres"] <- "aleix.palahi@ebc.uu.se"
contact[is.na(contact$email)]
contact[is.na(contact$email),]
# Check who is missing email addresses...
contact[is.na(contact$email),]
writexl::write_xlsx(contact[order(contact$email),], path="2024-P2/Teacher-contact-list.xlsx")
setwd("~/Projects/GIT/legenDNAry")
### Load data
dnamat <- readRDS("Processed_data/stem-soil-40pt-data-lenient_10k-20241205.RDA")[[1]]
stem.23 <- readRDS("Processed_data/stem-soil-40pt-data-lenient_10k-20241205.RDA")[[2]]
stem.16 <- readRDS("Processed_data/stem-soil-40pt-data-lenient_10k-20241205.RDA")[[4]]
### Load data
dnamat <- readRDS("Processed_data/stem-soil-40pt-data-lenient_10k-20241205.RDA")[[1]]
stem.23 <- readRDS("Processed_data/stem-soil-40pt-data-lenient_10k-20241205.RDA")[[2]]
### Load data
dnamat <- readRDS("Processed_data/stem-soil-40pt-data-lenient_10k-20241205.RDA")[[1]]
stem.23 <- readRDS("Processed_data/stem-soil-40pt-data-lenient_10k-20241205.RDA")[[2]]
### Count number of valid eDNA sample points (out of 40)
(npts <- nrow(stem.23$abund[[1]]) - length(grep('random', rownames(stem.23$abund[[1]]))))
readRDS("Raw_data/LFDP2016-extract-v2-20240427.RDA")
### Count number of valid eDNA sample points (out of 40)
(npts <- nrow(stem.23$abund[[1]]) - length(grep('random', rownames(stem.23$abund[[1]]))))
### gOTU full plot summaries
lfdp23 <- readRDS("Raw_data/LFDP2023-extract-v2-20240427-gOTUs.RDA")
### Make presence absence matrices
dnamat.pa <- 1*(dnamat>0)
### Make presence absence matrices
dnamat.pa <- 1*(dnamat>0)
stem.pa.list <- lapply(stem.23$abund, function(x) 1*(x>0))
### Color palette for plotting
cp <- rev(viridis::viridis(20))
### Make a matrix of false positives at 5 m
fp <- 1 * (dnamat.pa==1 & stem.pa.list$`5`[1:38,]==0)
### Make a matrix of false absences at 5 m
fa <- 1 * (dnamat.pa==0 & stem.pa.list$`5`[1:38,]==1)
### Make a matrix of true presences at 5 m
tp <- 1 * (dnamat.pa==1 & stem.pa.list$`5`[1:38,]==1)
### Make a matrix of false absences at 5 m
ta <- 1 * (dnamat.pa==0 & stem.pa.list$`5`[1:38,]==0)
ta
### Get proportion of sites where a gOTU was a false positive at 5 m
fp_prop <- colSums(fp)/npts
fa_prop <- colSums(fa)/npts
tp_prop <- colSums(tp)/npts
ta_prop <- colSums(ta)/npts
npts
plot(lfdp23$total_abund, fp_prop, log='x',
xlab="Total Abundance", ylab="Prop. of sites where false positive (at 5 m)",
pch=NA)
plot(lfdp23$total_abund, fp_prop, log='x',
xlab="Total Abundance", ylab="Prop. of sites where false positive (at 5 m)",
pch=21, bg='grey')
plot(lfdp23$total_abund, fp_prop, log='x',
xlab="Total Abundance", ylab="Prop. of sites where false positive (at 5 m)",
pch=16, col='grey')
legend("topleft", legend=c(paste('Pearson r =', round(cor.test(log(lfdp23$total_abund),
fp_prop)$estimate, 3)),
paste('p =', round(cor.test(log(lfdp23$total_abund),
fp_prop)$p.value, 3))),
bty='n')
text(lfdp23$total_abund, fp_prop, rownames(lfdp23), cex=0.75)
plot(lfdp23$total_abund, fa_prop, log='x',
xlab="Total Abundance", ylab="Prop. of sites where true positive (at 5 m)",
pch=16, col='grey')
# If you want to add text labels to know which OTU is which:
text(lfdp23$total_abund, fa_prop, rownames(lfdp23), cex=0.75)
plot(lfdp23$total_abund, ta_prop, log='x',
xlab="Total Abundance", ylab="Prop. of sites where true absence (at 5 m)",
pch=16, col='grey')
par(mfrow=c(2,2))
plot(lfdp23$total_abund, fp_prop, log='x',
xlab="Total Abundance", ylab="Prop. of sites where false positive (at 5 m)",
pch=16, col='grey')
par(mfrow=c(2,2), mar=c(4,4,1,1))
plot(lfdp23$total_abund, fp_prop, log='x',
xlab="Total Abundance", ylab="Prop. of sites where false positive (at 5 m)",
pch=16, col='grey')
# If you want to add text labels to know which OTU is which:
text(lfdp23$total_abund, fp_prop, rownames(lfdp23), cex=0.75)
par(mfrow=c(2,2), mar=c(4,4,1,1))
plot(lfdp23$total_abund, fp_prop, log='x',
xlab="Total Abundance", ylab="Prop. of sites where false positive (at 5 m)",
pch=16, col='grey')
# If you want to add text labels to know which OTU is which:
# text(lfdp23$total_abund, fp_prop, rownames(lfdp23), cex=0.75)
plot(lfdp23$total_abund, fa_prop, log='x',
xlab="Total Abundance", ylab="Prop. of sites where false absence (at 5 m)",
pch=16, col='grey')
plot(lfdp23$total_abund, fa_prop, log='x',
xlab="Total Abundance", ylab="Prop. of sites where true positive (at 5 m)",
pch=16, col='grey')
plot(lfdp23$total_abund, ta_prop, log='x',
xlab="Total Abundance", ylab="Prop. of sites where true absence (at 5 m)",
pch=16, col='grey')
plot(lfdp23$total_abund, fp_prop, log='x',
xlab="Total Abundance", ylab="Prop. of sites where FP (@5 m)",
pch=16, col='grey')
plot(lfdp23$total_abund, fp_prop, log='x',
xlab="Total Abundance", ylab="Prop. of sites where FP @5 m",
pch=16, col='grey')
par(mfrow=c(2,2), mar=c(4,4,1,1))
plot(lfdp23$total_abund, fp_prop, log='x',
xlab="Total Abundance", ylab="Prop sites where FP @5m",
pch=16, col='grey')
# If you want to add text labels to know which OTU is which:
# text(lfdp23$total_abund, fp_prop, rownames(lfdp23), cex=0.75)
plot(lfdp23$total_abund, fa_prop, log='x',
xlab="Total Abundance", ylab="Prop sites where FA @5m",
pch=16, col='grey')
plot(lfdp23$total_abund, fa_prop, log='x',
xlab="Total Abundance", ylab="Prop sites where TP @ 5m",
pch=16, col='grey')
plot(lfdp23$total_abund, ta_prop, log='x',
xlab="Total Abundance", ylab="Prop sites where TA @5m",
pch=16, col='grey')
plot(lfdp23$total_abund, fp_prop, log='',
xlab="Total Abundance", ylab="Prop sites where FP @5m",
pch=16, col='grey')
plot(lfdp23$total_abund, fa_prop, log='',
xlab="Total Abundance", ylab="Prop sites where FA @5m",
pch=16, col='grey')
plot(lfdp23$total_ba, fp_prop, log='x',
xlab="Total Basal Area", ylab="Prop sites where FP @5m",
pch=16, col='grey')
par(mfrow=c(2,2), mar=c(4,4,1,1))
plot(lfdp23$total_ba, fp_prop, log='x',
xlab="Total Basal Area (m2)", ylab="Prop sites where FP @5m",
pch=16, col='grey')
# If you want to add text labels to know which OTU is which:
# text(lfdp23$total_abund, fp_prop, rownames(lfdp23), cex=0.75)
plot(lfdp23$total_ba, fa_prop, log='x',
xlab="Total Basal Area (m2)", ylab="Prop sites where FA @5m",
pch=16, col='grey')
plot(lfdp23$total_ba, fa_prop, log='x',
xlab="Total Basal Area (m2)", ylab="Prop sites where TP @ 5m",
pch=16, col='grey')
plot(lfdp23$total_ba, ta_prop, log='x',
xlab="Total Basal Area (m2)", ylab="Prop sites where TA @5m",
pch=16, col='grey')
par(mfrow=c(2,2), mar=c(4,4,1,1))
plot(lfdp23$total_abund, fp_prop, log='x',
xlab="Total Abundance", ylab="Prop sites where FP @5m",
pch=16, col='grey')
# If you want to add text labels to know which OTU is which:
# text(lfdp23$total_abund, fp_prop, rownames(lfdp23), cex=0.75)
plot(lfdp23$total_abund, fa_prop, log='x',
xlab="Total Abundance", ylab="Prop sites where FA @5m",
pch=16, col='grey')
plot(lfdp23$total_abund, fa_prop, log='x',
xlab="Total Abundance", ylab="Prop sites where TP @ 5m",
pch=16, col='grey')
plot(lfdp23$total_abund, ta_prop, log='x',
xlab="Total Abundance", ylab="Prop sites where TA @5m",
pch=16, col='grey')
plot(lfdp23$total_abund, fp_prop, log='x',
xlab="Total Abundance", ylab="Prop sites where FP @5m",
pch=16)
plot(lfdp23$total_abund, fp_prop, log='x',
xlab="Total Abundance", ylab="Prop sites where FP @5m",
pch=16)
# If you want to add text labels to know which OTU is which:
# text(lfdp23$total_abund, fp_prop, rownames(lfdp23), cex=0.75)
plot(lfdp23$total_abund, fa_prop, log='x',
xlab="Total Abundance", ylab="Prop sites where FA @5m",
pch=16, col='grey')
plot(lfdp23$total_abund, fa_prop, log='x',
xlab="Total Abundance", ylab="Prop sites where TP @ 5m",
pch=16, col='grey')
plot(lfdp23$total_abund, ta_prop, log='x',
xlab="Total Abundance", ylab="Prop sites where TA @5m",
pch=16, col='grey')
par(mfrow=c(2,2), mar=c(4,4,1,1))
plot(lfdp23$total_abund, fp_prop, log='x',
xlab="Total Abundance", ylab="Prop sites where FP @5m",
pch=16)
# If you want to add text labels to know which OTU is which:
# text(lfdp23$total_abund, fp_prop, rownames(lfdp23), cex=0.75)
plot(lfdp23$total_abund, fa_prop, log='x',
xlab="Total Abundance", ylab="Prop sites where FA @5m",
pch=16, col='grey')
plot(lfdp23$total_abund, fa_prop, log='x',
xlab="Total Abundance", ylab="Prop sites where TP @ 5m",
pch=16, col='grey')
plot(lfdp23$total_abund, ta_prop, log='x',
xlab="Total Abundance", ylab="Prop sites where TA @5m",
pch=16, col='grey')
par(mfrow=c(2,2), mar=c(4,4,1,1))
plot(lfdp23$total_abund, fp_prop, log='x',
xlab="Total Abundance", ylab="Prop sites where FP @5m",
pch=16)
# If you want to add text labels to know which OTU is which:
# text(lfdp23$total_abund, fp_prop, rownames(lfdp23), cex=0.75)
plot(lfdp23$total_abund, fa_prop, log='x',
xlab="Total Abundance", ylab="Prop sites where FA @5m",
pch=16)
plot(lfdp23$total_abund, fa_prop, log='x',
xlab="Total Abundance", ylab="Prop sites where TP @ 5m",
pch=16)
plot(lfdp23$total_abund, ta_prop, log='x',
xlab="Total Abundance", ylab="Prop sites where TA @5m",
pch=16)
glm(fp_prop ~ lfdp23$total_abund, family='binomial')
library(microViz)
library(MiscMetabar)
library(ggpubr)
#### Making some upset plots for sub-sample & mixed samples - c18
tab <- subsample_etc$ssdat
subsample_etc<- readRDS("Processed_data/subsample-smallplot.RData")
subsample_etc<- readRDS("Processed_data/subsample-smallplot.RData")
#### Making some upset plots for sub-sample & mixed samples - c12
tab <- subsample_etc$ssdat
c12 <- subset_samples(tab, realsample1 == "C12")
c12 <- subset_samples(c12, DNAtreat == "clean")
c12<- phyloseq_validate(c12, remove_undetected = TRUE)
k1 <- upset_pq(c12, fact = "sample_from_sheet", name='sample/subsample', set_sizes=FALSE) +
ggtitle("All data, libs >10k, no other filtering, \nmixed sample 12 & subsamples") +
theme(plot.title = element_text(size = 10), axis.title.x=element_blank())
# Demo script for 2024-P2
library(officer)
library(flextable)
url <- "https://raw.githubusercontent.com/bobmuscarella/EBC-Teaching-Hours-Calculator/master/Functions/"
source(paste0(url, "get_course_codes.R"))
source(paste0(url, "count_hours_multi.R"))
source(paste0(url, "count_hours_teachers.R"))
source(paste0(url, "compile_from_teacher_tables.R"))
# Set the infile as the .xlsx file downloaded from TimeEdit.
list.files("2024-P2")
infile <- "2024-P2/TimeEdit_2025-02-24_16_19.xlsx"
# 5. Compile from teacher tables
compile_teacher_tables(inpath="2024-P2/Teachers_for_review-edited",
outpath="2024-P2/",
original_TE_file=list.files("2024-P2/OG_data", full.names=T))
# Demo script for 2024-P2
library(officer)
library(flextable)
url <- "https://raw.githubusercontent.com/bobmuscarella/EBC-Teaching-Hours-Calculator/master/Functions/"
source(paste0(url, "get_course_codes.R"))
source(paste0(url, "count_hours_multi.R"))
source(paste0(url, "count_hours_teachers.R"))
source(paste0(url, "compile_from_teacher_tables.R"))
# Demo script for 2024-P2
library(officer)
library(flextable)
# 0. source the functions
url <- "https://raw.githubusercontent.com/bobmuscarella/EBC-Teaching-Hours-Calculator/master/Functions/"
source(paste0(url, "get_course_codes.R"))
source(paste0(url, "count_hours_multi.R"))
source(paste0(url, "count_hours_teachers.R"))
source(paste0(url, "compile_from_teacher_tables.R"))
# 1. get_course_codes
# Set the infile as the .xlsx file downloaded from TimeEdit.
list.files("2025-P3")
infile <- "2025-P3/TimeEdit_2025-03-20_14_52.xlsx"
# Run the function
get_course_codes(infile)
# Read in the file produced in the last step (after adding course leaders)
course_list <- readxl::read_xlsx(paste0(dirname(infile), "/Course_list_", basename(infile)))
course_list
count_hours_multi(infile=infile,
outpath="2025-P3/",
course_leaders=course_list$course_leader,
course_codes=course_list$code,
exclude_no_teacher=TRUE,
admin_hours=40)
# Read in the file produced in the last step (after adding course leaders)
course_list <- readxl::read_xlsx(paste0(dirname(infile), "/Course_list_", basename(infile)))
course_list
# Read in the file produced in the last step (after adding course leaders)
course_list <- readxl::read_xlsx(paste0(dirname(infile), "/Course_list_", basename(infile)))
course_list
count_hours_multi(infile=infile,
outpath="2025-P3/",
course_leaders=course_list$course_leader,
course_codes=course_list$code,
exclude_no_teacher=TRUE,
admin_hours=40)
# Demo script for 2024-P2
library(officer)
library(flextable)
# 0. source the functions
url <- "https://raw.githubusercontent.com/bobmuscarella/EBC-Teaching-Hours-Calculator/master/Functions/"
source(paste0(url, "get_course_codes.R"))
source(paste0(url, "count_hours_multi.R"))
source(paste0(url, "count_hours_teachers.R"))
source(paste0(url, "compile_from_teacher_tables.R"))
# Set the infile as the .xlsx file downloaded from TimeEdit.
list.files("2025-P3")
infile <- "2025-P3/TimeEdit_2025-03-20_14_52.xlsx"
# Run the function
get_course_codes(infile)
# Read in the file produced in the last step (after adding course leaders)
course_list <- readxl::read_xlsx(paste0(dirname(infile), "/Course_list_", basename(infile)))
count_hours_multi(infile=infile,
outpath="2025-P3/",
course_leaders=course_list$course_leader,
course_codes=course_list$code,
exclude_no_teacher=TRUE,
admin_hours=40)
count_hours_multi
infile <- "2025-P3/TimeEdit_2025-03-20_14_52.xlsx"
infile
test_course_leader=FALSE
courses_to_skip=c("1BG411", "1BG405")
# Read the input file (exclude first 5 rows header)
teall <- as.data.frame(readxl::read_excel(infile, skip=5))
teall <- teall[!is.na(teall$`Course signatur`),]
teall
teall$`Course signatur`
teall$code <- sapply(strsplit(teall$`Course signatur`, "-"), function(x) x[[1]])
teall$code
teall$code %in% courses_to_skip
teall$code
courses_to_skip
sum(teall$code %in% courses_to_skip)
sum(!teall$code %in% courses_to_skip)
# Read the input file (exclude first 5 rows header)
teall <- as.data.frame(readxl::read_excel(infile, skip=5))
teall <- teall[!is.na(teall$`Course signatur`),]
teall$code <- sapply(strsplit(teall$`Course signatur`, "-"), function(x) x[[1]])
# Remove courses identified as online only or for whatever reason
teall <- teall[!teall$code %in% courses_to_skip,]
codes <- sort(unique(teall$code))
# Sometimes we have multiple signatures for a given course code.  We want to keep the multiple signatures in the 'signature' column but aggregate the rows based on course code.
out <- aggregate(teall$`Course signatur`,
by=list(teall$code),
FUN=function(x) paste(unique(x), collapse="; "))
names(out) <- c("code", "signature")
out$course_name <- teall$Course[match(out$code, teall$code)]
out$course_leader <- NA
# FOR TESTING: TO ADD A TEMP TEST COURSE LEADER
if(test_course_leader){
out$course_leader <- sapply(strsplit(teall$Staff[match(out$code, teall$code)], ","), function(x) x[[1]])
}
out
teall <- as.data.frame(readxl::read_excel(infile, skip=5))
teall <- teall[!is.na(teall$`Course signatur`),]
teall$code <- sapply(strsplit(teall$`Course signatur`, "-"), function(x) x[[1]])
# Remove courses identified as online only or for whatever reason
# teall <- teall[!teall$code %in% courses_to_skip,]
codes <- sort(unique(teall$code))
# Sometimes we have multiple signatures for a given course code.  We want to keep the multiple signatures in the 'signature' column but aggregate the rows based on course code.
out <- aggregate(teall$`Course signatur`,
by=list(teall$code),
FUN=function(x) paste(unique(x), collapse="; "))
names(out) <- c("code", "signature")
out$course_name <- teall$Course[match(out$code, teall$code)]
out$course_leader <- NA
out
infile
outpath="2025-P3/"
# Read in the file produced in the last step (after adding course leaders)
course_list <- readxl::read_xlsx(paste0(dirname(infile), "/Course_list_", basename(infile)))
course_list
course_list <- course_list[!course_list %in% courses_to_skip,]
course_list[!course_list$code %in% courses_to_skip,]
course_list <- course_list[!course_list$code %in% courses_to_skip,]
course_leaders=course_list$course_leader
course_codes=course_list$code
exclude_no_teacher=TRUE
admin_hours=40
