teachers <- sort(unique(c(course_leader, unlist(strsplit(te$Teacher, ', ')))))
# Count hours per teacher per activity
hrsDF <- data.frame(Teacher=teachers, Administration=NA, Development=NA,
Lecture=NA, Exercise=NA, Excursion=NA, Supervision=NA, Total=NA)
for(i in seq_along(teachers)){
fochrdf <- hrmat[grepl(teachers[i], te$Teacher),]
hrsDF[i,4:7] <- tapply(fochrdf$hours, fochrdf$activity, sum)
hrsDF[i,8] <- sum(fochrdf$GU_hours) + 40*teachers[i] %in% course_leader
}
hrsDF[is.na(hrsDF)] <- 0
# Give 40 admin hours to the course leader
message(ifelse(is.null(course_leader), "Warning: no course leader identified so administration hours will not be assigned.",
paste("Note: Course leader is identified as", course_leader)))
hrsDF[hrsDF$Teacher==course_leader, 'Administration'] <- 40
# Warning about no development hours given by this program
message("Note: No development hours are assigned by this program. Add these manually if necessary and remember to update the total!")
# Save output
xlsx::write.xlsx(hrsDF, outfile, row.names = F)
}
count_hours(infile="/Users/au529793/Downloads/TimeEdit_2022-10-14_11_18.xls",
outfile="/Users/au529793/Desktop/1BG324_hours_2022.xls",
course_leader = "Robert Muscarella")
infile="/Users/au529793/Downloads/TimeEdit_2022-10-14_11_18.xls"
outfile="/Users/au529793/Desktop/1BG324_hours_2022.xls"
course_leader = "Robert Muscarella"
# Read the input file
te <- readxl::read_excel(infile, skip=5)
dim(te)
# Remove lines with no teacher assigned
te <- te[!is.na(te$Teacher),]
dim(te)
# Read the input file
te <- readxl::read_excel(infile, skip=5)
head(te)
# Get start times/dates
sdts <- te$`Begin date`
stms <- te$`Begin time`
s <- timeDate::timeDate(paste(sdts, stms), format = "%Y-%m-%d %H:%M")
head(s)
s[grepl(':15', s)]
# Convert start times at quarter past to one hour
s[grepl(':15', s)] <- s[grepl(':15', s)] - (15*60)
s
# Get end times/dates
edts <- te$`End date`
etms <- te$`End time`
e <- timeDate::timeDate(paste(edts, etms), format = "%Y-%m-%d %H:%M")
e
# Count hours in each row
te$hours <- as.vector(e-s)
head(te)
head(te[te$Teacher=="Anssi Laurali"])
te$Teacher
head(te[te$Teacher=="Anssi Laurila"])
head(te[te$Teacher=="Anssi Laurila",])
head(te[te$Teacher %in% "Anssi Laurila",])
as.data.frame(te[te$Teacher %in% "Anssi Laurila",])
library(plyr)
round_any(te$Length, 0.5)
tail(te)
?readxl::read_excel
# Read the input file
te <- as.data.frame(readxl::read_excel(infile, skip=5))
tail(te)
tail(te, 10)
# Read the input file
te <- as.data.frame(readxl::read_excel(infile, skip=5))
te$Week
te$Length
te[!is.na(te$Length),]
te[!is.na(te$Teacher),]
# Read the input file
te <- as.data.frame(readxl::read_excel(infile, skip=5))
# Remove lines with no teacher assigned
te <- te[!is.na(te$Teacher),]
tail(te)
head(te)
te$hours <- plyr::round_any(te$Length, 0.5)
te$hours
# The current code uses the text from the "Reason" column to determine the activity.
te$multiplier <- ifelse(grepl("lecture", tolower(te$Reason)), 4,
ifelse(grepl("lab", tolower(te$Reason)), 2,
ifelse(grepl("exercise", tolower(te$Reason)), 2,
ifelse(grepl("excursion", tolower(te$Reason)), 1.5,
ifelse(grepl("field", tolower(te$Reason)), 1.5,
ifelse(grepl("seminar", tolower(te$Reason)), 1.5,
ifelse(grepl("exam", tolower(te$Reason)), 1,
ifelse(grepl("presentation", tolower(te$Reason)), 1,
ifelse(grepl("supervision", tolower(te$Reason)), 1, NA)))))))))
te
te$multiplier
mat <- data.frame(cbind(te$Reason[which(is.na(te$multiplier))], which(is.na(te$multiplier))+6))
names(mat) <- c("Reason","Row")
print(mat)
if(any(is.na(te$multiplier))){
message(paste("Warning: Activity type is not recognized from the 'Reason' column.
Please check row(s)", paste(which(is.na(te$multiplier))+6, collapse=", "), "in the input spreadsheet. Until this is changed, these hours will be multiplied 1x and counted as 'Supervision'."))
mat <- data.frame(cbind(te$Reason[which(is.na(te$multiplier))], which(is.na(te$multiplier))+6))
names(mat) <- c("Reason","Row")
print(mat)
message("To ensure the correct multiplier, please use one of the following labels in all rows for the 'Reason' column: lecture, lab, exercise, excursion, field course, seminar, exam, presentation, or supervision.")
}
if(any(is.na(te$multiplier))){
message(paste("Warning: Activity type is not recognized from the 'Reason' column.
The following row(s)", paste(which(is.na(te$multiplier))+6, collapse=", "), "in the input spreadsheet should be confirmed."))
mat <- data.frame(cbind(te$Reason[which(is.na(te$multiplier))], which(is.na(te$multiplier))+6))
names(mat) <- c("Reason","Row")
print(mat)
message("Until this is changed, these hours will be multiplied 1x and counted as 'Supervision'. To ensure the correct multiplier, please use one of the following labels in all rows for the 'Reason' column: lecture, lab, exercise, excursion, field course, seminar, exam, presentation, or supervision.")
}
if(any(is.na(te$multiplier))){
message(paste("Warning: Activity type is not recognized from the 'Reason' column.
The following row(s) in the input spreadsheet should be confirmed."))
mat <- data.frame(cbind(te$Reason[which(is.na(te$multiplier))], which(is.na(te$multiplier))+6))
names(mat) <- c("Reason","Row")
print(mat)
message("Until this is changed, these hours will be multiplied 1x and counted as 'Supervision'. To ensure the correct multiplier, please use one of the following labels in all rows for the 'Reason' column: lecture, lab, exercise, excursion, field course, seminar, exam, presentation, or supervision.")
}
if(any(is.na(te$multiplier))){
message(paste("Warning: Activity type is not recognized from the 'Reason' column.
The following row(s) in the input spreadsheet should be checked:"))
mat <- data.frame(cbind(te$Reason[which(is.na(te$multiplier))], which(is.na(te$multiplier))+6))
names(mat) <- c("Reason","Row")
print(mat)
message("Until this is changed, these hours will be multiplied 1x and counted as 'Supervision'. To ensure the correct multiplier, please use one of the following labels in all rows for the 'Reason' column: lecture, lab, exercise, excursion, field course, seminar, exam, presentation, or supervision.")
}
message("Until this is changed, these hours will be multiplied by 1 and counted as 'Supervision'. To ensure the correct multiplier, please use one of the following labels in all rows for the 'Reason' column: lecture, lab, exercise, excursion, field course, seminar, exam, presentation, or supervision.")
if(any(is.na(te$multiplier))){
message(paste("Warning: Activity type is not recognized from the 'Reason' column.
The following row(s) in the input spreadsheet should be checked:"))
mat <- data.frame(cbind(te$Reason[which(is.na(te$multiplier))], which(is.na(te$multiplier))+6))
names(mat) <- c("Reason","Row")
print(mat)
message("Until this is changed, these hours will be multiplied by 1 and counted as 'Supervision'. To ensure the correct multiplier, please use one of the following labels in all rows for the 'Reason' column: lecture, lab, exercise, excursion, field course, seminar, exam, presentation, or supervision.")
}
te$multiplier[is.na(te$multiplier)] <- 1
levels(te$activity) <- 1:4
te$activity[is.na(te$activity)] <- 4
# The current code uses the text from the "Reason" column to determine the activity.
te$multiplier <- ifelse(grepl("lecture", tolower(te$Reason)), 4,
ifelse(grepl("lab", tolower(te$Reason)), 2,
ifelse(grepl("exercise", tolower(te$Reason)), 2,
ifelse(grepl("excursion", tolower(te$Reason)), 1.5,
ifelse(grepl("field", tolower(te$Reason)), 1.5,
ifelse(grepl("seminar", tolower(te$Reason)), 1.5,
ifelse(grepl("exam", tolower(te$Reason)), 1,
ifelse(grepl("presentation", tolower(te$Reason)), 1,
ifelse(grepl("supervision", tolower(te$Reason)), 1, NA)))))))))
te$activity <- as.factor(ifelse(grepl("lecture", tolower(te$Reason)), 1,
ifelse(grepl("lab", tolower(te$Reason)), 2,
ifelse(grepl("exercise", tolower(te$Reason)), 2,
ifelse(grepl("excursion", tolower(te$Reason)), 3,
ifelse(grepl("field", tolower(te$Reason)), 3,
ifelse(grepl("seminar", tolower(te$Reason)), 3,
ifelse(grepl("exam", tolower(te$Reason)), 4,
ifelse(grepl("presentation", tolower(te$Reason)), 4,
ifelse(grepl("supervision", tolower(te$Reason)), 4, NA))))))))))
if(any(is.na(te$multiplier))){
message(paste("Warning: Activity type is not recognized from the 'Reason' column.
The following row(s) in the input spreadsheet should be checked:"))
mat <- data.frame(cbind(te$Reason[which(is.na(te$multiplier))], which(is.na(te$multiplier))+6))
names(mat) <- c("Reason","Row")
print(mat)
message("Until this is changed, these hours will be multiplied by 1 and counted as 'Supervision'. To ensure the correct multiplier, please use one of the following labels in all rows for the 'Reason' column: lecture, lab, exercise, excursion, field course, seminar, exam, presentation, or supervision.")
}
te$multiplier[is.na(te$multiplier)] <- 1
levels(te$activity) <- 1:4
te$activity[is.na(te$activity)] <- 4
hrmat <- te[,c('activity','multiplier','hours')]
hrmat$GU_hours <- hrmat$multiplier * hrmat$hours
# Make a list of all teachers
teachers <- sort(unique(c(course_leader, unlist(strsplit(te$Teacher, ', ')))))
# Count hours per teacher per activity
hrsDF <- data.frame(Teacher=teachers, Administration=NA, Development=NA,
Lecture=NA, Exercise=NA, Excursion=NA, Supervision=NA, Total=NA)
# Count hours per teacher per activity
hrsDF <- data.frame(Teacher=teachers,
Administration=NA,
Development=NA,
Lecture=NA,
Exercise=NA,
Excursion=NA,
Supervision=NA,
Total=NA)
for(i in seq_along(teachers)){
fochrdf <- hrmat[grepl(teachers[i], te$Teacher),]
hrsDF[i,4:7] <- tapply(fochrdf$hours, fochrdf$activity, sum)
hrsDF[i,8] <- sum(fochrdf$GU_hours) + 40*teachers[i] %in% course_leader
}
hrsDF[is.na(hrsDF)] <- 0
# Give 40 admin hours to the course leader
message(ifelse(is.null(course_leader), "Warning: no course leader identified so administration hours will not be assigned.",
paste("Note: Course leader is identified as", course_leader)))
hrsDF[hrsDF$Teacher==course_leader, 'Administration'] <- 40
# Warning about no development hours given by this program
message("Note: No development hours are assigned by this program. Add these manually if necessary and remember to update the total!")
# Save output
xlsx::write.xlsx(hrsDF, outfile, row.names = F)
hrsDF
# Save output
xlsx::write.xlsx(hrsDF, outfile, row.names = F)
# Count hours per teacher per activity
hrsDF <- data.frame(Teacher=teachers,
Administration=NA,
Development=NA,
Lecture=NA,
Exercise=NA,
Excursion=NA,
Supervision=NA,
Total_GU=NA)
for(i in seq_along(teachers)){
fochrdf <- hrmat[grepl(teachers[i], te$Teacher),]
hrsDF[i,4:7] <- tapply(fochrdf$hours, fochrdf$activity, sum)
hrsDF[i,8] <- sum(fochrdf$GU_hours) + 40*teachers[i] %in% course_leader
}
hrsDF[is.na(hrsDF)] <- 0
# Give 40 admin hours to the course leader
message(ifelse(is.null(course_leader), "Warning: no course leader identified so administration hours will not be assigned.",
paste("Note: Course leader is identified as", course_leader)))
hrsDF[hrsDF$Teacher==course_leader, 'Administration'] <- 40
# Warning about no development hours given by this program
message("Note: No development hours are assigned by this program. Add these manually if necessary and remember to update the total!")
# Save output
xlsx::write.xlsx(hrsDF, outfile, row.names = F)
count_hours(infile="/Users/au529793/Downloads/TimeEdit_2022-10-14_11_47.xls",
outfile="/Users/au529793/Desktop/1BG513_hours_2022.xls",
course_leader = "Sebastian Sobeck")
count_hours(infile="/Users/au529793/Downloads/TimeEdit_2022-10-14_12_09.xls",
outfile="/Users/au529793/Desktop/1BG428_hours_2022.xls",
course_leader = "Robert Muscarella")
names(te)
tolower(names(te)) %in% c("teacher", "staff")
which(tolower(names(te)) %in% c("teacher", "staff"))
names(te)[which(tolower(names(te)) %in% c("teacher", "staff"))]
name_col <- names(te)[which(tolower(names(te)) %in% c("teacher", "staff"))]
te[,name_col]
count_hours <- function(infile, outfile, course_leader=NULL){
# Read the input file
te <- as.data.frame(readxl::read_excel(infile, skip=5))
name_col <- names(te)[which(tolower(names(te)) %in% c("teacher", "staff"))]
# Remove lines with no teacher assigned
te <- te[!is.na(te[,name_col]),]
# # Get start times/dates
# sdts <- te$`Begin date`
# stms <- te$`Begin time`
# s <- timeDate::timeDate(paste(sdts, stms), format = "%Y-%m-%d %H:%M")
#
# # Convert start times at quarter past to one hour
# s[grepl(':15', s)] <- s[grepl(':15', s)] - (15*60)
#
# # Get end times/dates
# edts <- te$`End date`
# etms <- te$`End time`
# e <- timeDate::timeDate(paste(edts, etms), format = "%Y-%m-%d %H:%M")
# Count hours in each row
# te$hours <- as.vector(e-s)
# Round activity hours to nearest 0.5 (e.g., 45 min sessions get 1 hour)
te$hours <- plyr::round_any(te$Length, 0.5)
### Activity code
# The hours assigned to each activity get multiplied to arrive at GU hours.
# This is based on the follow rubric multipliers:
# Lecture = 4 x
# Lab, exercise = 2 x
# Excursion, field trip, seminar = 1.5 x
# Presentation, supervision = 1 x
# The current code uses the text from the "Reason" column to determine the activity.
te$multiplier <- ifelse(grepl("lecture", tolower(te$Reason)), 4,
ifelse(grepl("lab", tolower(te$Reason)), 2,
ifelse(grepl("exercise", tolower(te$Reason)), 2,
ifelse(grepl("excursion", tolower(te$Reason)), 1.5,
ifelse(grepl("field", tolower(te$Reason)), 1.5,
ifelse(grepl("seminar", tolower(te$Reason)), 1.5,
ifelse(grepl("exam", tolower(te$Reason)), 1,
ifelse(grepl("presentation", tolower(te$Reason)), 1,
ifelse(grepl("supervision", tolower(te$Reason)), 1, NA)))))))))
te$activity <- as.factor(ifelse(grepl("lecture", tolower(te$Reason)), 1,
ifelse(grepl("lab", tolower(te$Reason)), 2,
ifelse(grepl("exercise", tolower(te$Reason)), 2,
ifelse(grepl("excursion", tolower(te$Reason)), 3,
ifelse(grepl("field", tolower(te$Reason)), 3,
ifelse(grepl("seminar", tolower(te$Reason)), 3,
ifelse(grepl("exam", tolower(te$Reason)), 4,
ifelse(grepl("presentation", tolower(te$Reason)), 4,
ifelse(grepl("supervision", tolower(te$Reason)), 4, NA))))))))))
if(any(is.na(te$multiplier))){
message(paste("Warning: Activity type is not recognized from the 'Reason' column.
The following row(s) in the input spreadsheet should be checked:"))
mat <- data.frame(cbind(te$Reason[which(is.na(te$multiplier))], which(is.na(te$multiplier))+6))
names(mat) <- c("Reason","Row")
print(mat)
message("Until this is changed, these hours will be multiplied by 1 and counted as 'Supervision'. To ensure the correct multiplier, please use one of the following labels in all rows for the 'Reason' column: lecture, lab, exercise, excursion, field course, seminar, exam, presentation, or supervision.")
}
te$multiplier[is.na(te$multiplier)] <- 1
levels(te$activity) <- 1:4
te$activity[is.na(te$activity)] <- 4
hrmat <- te[,c('activity','multiplier','hours')]
hrmat$GU_hours <- hrmat$multiplier * hrmat$hours
# Make a list of all teachers
teachers <- sort(unique(c(course_leader, unlist(strsplit(te[,name_col], ', ')))))
# Count hours per teacher per activity
hrsDF <- data.frame(Teacher=teachers,
Administration=NA,
Development=NA,
Lecture=NA,
Exercise=NA,
Excursion=NA,
Supervision=NA,
Total_GU=NA)
for(i in seq_along(teachers)){
fochrdf <- hrmat[grepl(teachers[i], te[,name_col]),]
hrsDF[i,4:7] <- tapply(fochrdf$hours, fochrdf$activity, sum)
hrsDF[i,8] <- sum(fochrdf$GU_hours) + 40*teachers[i] %in% course_leader
}
hrsDF[is.na(hrsDF)] <- 0
# Give 40 admin hours to the course leader
message(ifelse(is.null(course_leader), "Warning: no course leader identified so administration hours will not be assigned.",
paste("Note: Course leader is identified as", course_leader)))
hrsDF[hrsDF[,name_col]==course_leader, 'Administration'] <- 40
# Warning about no development hours given by this program
message("Note: No development hours are assigned by this program. Add these manually if necessary and remember to update the total!")
# Save output
xlsx::write.xlsx(hrsDF, outfile, row.names = F)
}
count_hours(infile="/Users/au529793/Downloads/TimeEdit_2022-10-14_12_09.xls",
outfile="/Users/au529793/Desktop/1BG428_hours_2022.xls",
course_leader = "Robert Muscarella")
count_hours <- function(infile, outfile, course_leader=NULL){
# Read the input file
te <- as.data.frame(readxl::read_excel(infile, skip=5))
name_col <- names(te)[which(tolower(names(te)) %in% c("teacher", "staff"))]
# Remove lines with no teacher assigned
te <- te[!is.na(te[,name_col]),]
# # Get start times/dates
# sdts <- te$`Begin date`
# stms <- te$`Begin time`
# s <- timeDate::timeDate(paste(sdts, stms), format = "%Y-%m-%d %H:%M")
#
# # Convert start times at quarter past to one hour
# s[grepl(':15', s)] <- s[grepl(':15', s)] - (15*60)
#
# # Get end times/dates
# edts <- te$`End date`
# etms <- te$`End time`
# e <- timeDate::timeDate(paste(edts, etms), format = "%Y-%m-%d %H:%M")
# Count hours in each row
# te$hours <- as.vector(e-s)
# Round activity hours to nearest 0.5 (e.g., 45 min sessions get 1 hour)
te$hours <- plyr::round_any(te$Length, 0.5)
### Activity code
# The hours assigned to each activity get multiplied to arrive at GU hours.
# This is based on the follow rubric multipliers:
# Lecture = 4 x
# Lab, exercise = 2 x
# Excursion, field trip, seminar = 1.5 x
# Presentation, supervision = 1 x
# The current code uses the text from the "Reason" column to determine the activity.
te$multiplier <- ifelse(grepl("lecture", tolower(te$Reason)), 4,
ifelse(grepl("lab", tolower(te$Reason)), 2,
ifelse(grepl("exercise", tolower(te$Reason)), 2,
ifelse(grepl("excursion", tolower(te$Reason)), 1.5,
ifelse(grepl("field", tolower(te$Reason)), 1.5,
ifelse(grepl("seminar", tolower(te$Reason)), 1.5,
ifelse(grepl("exam", tolower(te$Reason)), 1,
ifelse(grepl("presentation", tolower(te$Reason)), 1,
ifelse(grepl("supervision", tolower(te$Reason)), 1, NA)))))))))
te$activity <- as.factor(ifelse(grepl("lecture", tolower(te$Reason)), 1,
ifelse(grepl("lab", tolower(te$Reason)), 2,
ifelse(grepl("exercise", tolower(te$Reason)), 2,
ifelse(grepl("excursion", tolower(te$Reason)), 3,
ifelse(grepl("field", tolower(te$Reason)), 3,
ifelse(grepl("seminar", tolower(te$Reason)), 3,
ifelse(grepl("exam", tolower(te$Reason)), 4,
ifelse(grepl("presentation", tolower(te$Reason)), 4,
ifelse(grepl("supervision", tolower(te$Reason)), 4, NA))))))))))
if(any(is.na(te$multiplier))){
message(paste("Warning: Activity type is not recognized from the 'Reason' column.
The following row(s) in the input spreadsheet should be checked:"))
mat <- data.frame(cbind(te$Reason[which(is.na(te$multiplier))], which(is.na(te$multiplier))+6))
names(mat) <- c("Reason","Row")
print(mat)
message("Until this is changed, these hours will be multiplied by 1 and counted as 'Supervision'. To ensure the correct multiplier, please use one of the following labels in all rows for the 'Reason' column: lecture, lab, exercise, excursion, field course, seminar, exam, presentation, or supervision.")
}
te$multiplier[is.na(te$multiplier)] <- 1
levels(te$activity) <- 1:4
te$activity[is.na(te$activity)] <- 4
hrmat <- te[,c('activity','multiplier','hours')]
hrmat$GU_hours <- hrmat$multiplier * hrmat$hours
# Make a list of all teachers
teachers <- sort(unique(c(course_leader, unlist(strsplit(te[,name_col], ', ')))))
# Count hours per teacher per activity
hrsDF <- data.frame(Teacher=teachers,
Administration=NA,
Development=NA,
Lecture=NA,
Exercise=NA,
Excursion=NA,
Supervision=NA,
Total_GU=NA)
for(i in seq_along(teachers)){
fochrdf <- hrmat[grepl(teachers[i], te[,name_col]),]
hrsDF[i,4:7] <- tapply(fochrdf$hours, fochrdf$activity, sum)
hrsDF[i,8] <- sum(fochrdf$GU_hours) + 40*teachers[i] %in% course_leader
}
hrsDF[is.na(hrsDF)] <- 0
# Give 40 admin hours to the course leader
message(ifelse(is.null(course_leader), "Warning: no course leader identified so administration hours will not be assigned.",
paste("Note: Course leader is identified as", course_leader)))
hrsDF[hrsDF$Teacher==course_leader, 'Administration'] <- 40
# Warning about no development hours given by this program
message("Note: No development hours are assigned by this program. Add these manually if necessary and remember to update the total!")
# Save output
xlsx::write.xlsx(hrsDF, outfile, row.names = F)
}
count_hours(infile="/Users/au529793/Downloads/TimeEdit_2022-10-14_12_09.xls",
outfile="/Users/au529793/Desktop/1BG428_hours_2022.xls",
course_leader = "Robert Muscarella")
count_hours(infile="/Users/au529793/Downloads/TimeEdit_2022-10-14_16_09.xls",
outfile="/Users/au529793/Desktop/1BG105_hours_2022.xls",
course_leader = "Frank Johansson")
read.csv("/Users/au529793/Projects/Thesis/DATA/census/MASTER.CENSUS.DATA.csv")
x <- read.csv("/Users/au529793/Projects/Thesis/DATA/census/MASTER.CENSUS.DATA.csv")
table(x$SITE, x$DATE)
x[!duplicated(x$SITE),]
dim9x[!duplicated(x$SITE),]
dim(x[!duplicated(x$SITE),])
table(x[!duplicated(x$SITE),c("SITE","DATE")])
xx <- droplevels(x[!duplicated(x$SITE),])
table(xx[,c("SITE","DATE")])
xx
xx[order(xx$site),]
xx[order(xx$SITE),]
xx$DATE[order(xx$SITE)]
t(xx$DATE[order(xx$SITE)])
t(t(xx$DATE[order(xx$SITE)]))
x$DATE[x$FOREST=="GUANICA"]
x$DATE[x$FOREST=="GUN"]
table(x$DATE[x$FOREST=="GUN"])
table(x$DATE[x$SITE=="GUN1"])
table(x$DATE[x$SITE=="GUN2"])
table(x$DATE[x$SITE=="GUN3"])
elev <- raster("/Users/au529793/Projects/Thesis/DATA/occurrences/GIS DATA/rasters/srtm_elev")
library(raster)
elev <- raster("/Users/au529793/Projects/Thesis/DATA/occurrences/GIS DATA/rasters/srtm_elev")
elev
chars <- read.csv("/Users/au529793/Projects/Thesis/DATA/census/Site.characteristics copy.csv")
chars[,c("LON", "LAT")]
extract(elev, chars[,c("LON", "LAT")])
t(t(extract(elev, chars[,c("LON", "LAT")])))
tapply(x$HT, x$SITE, quantile, prob=0.95)
tapply(x$HT, x$SITE, quantile, prob=0.95, na.rm=F)
tapply(x$HT, x$SITE, quantile, prob=0.95, na.rm=T)
t(t(tapply(x$HT, x$SITE, quantile, prob=0.95, na.rm=T)))
head(x)
sp <- read.csv("/Users/au529793/Projects/Thesis/DATA/census/PR_SP_LIST.csv")
sp
gsub("_", " ", sp$BINOM)
sp$binom <- gsub("_", " ", sp$BINOM)
sp$binom[match(x$SP.CODE, sp$CODE)]
cbind(x$SITE,
sp$binom[match(x$SP.CODE, sp$CODE)])
dbh=x$DBH)
as.data.frame(site=cbind(x$SITE,
sp=sp$binom[match(x$SP.CODE, sp$CODE)],
dbh=x$DBH))
x
x$DBH
sp$binom[match(x$SP.CODE, sp$CODE)]
x$DBH
x$SITE
as.data.frame(site=cbind(x$SITE,
sp=sp$binom[match(x$SP.CODE, sp$CODE)],
dbh=x$DBH))
as.data.frame(site=cbind(site=x$SITE,
sp=sp$binom[match(x$SP.CODE, sp$CODE)],
dbh=x$DBH))
data.frame(site=x$SITE,
sp=sp$binom[match(x$SP.CODE, sp$CODE)],
dbh=x$DBH)
d <- data.frame(site=x$SITE,
sp=sp$binom[match(x$SP.CODE, sp$CODE)],
dbh=x$DBH)
head(chars)
rownames(chars)
chars$SITE
d$plot <- as.numeric(rownames(chars))[match(d$site, chars$SITE.2)]
d$plot
table(d$plot)
d[,c("plot", "sp", "dbh")]
d <- d[,c("plot", "sp", "dbh")]
d <- d[order(d$plot, d$sp),]
head(d)
rownames(d) <- NULL
getwd()
write.csv(d, file="/Users/au529793/Projects/Thesis/DATA/census/sPlot_data.csv")
table(d$sp)
d <- d[!is.na(d$sp),]
write.csv(d, file="/Users/au529793/Projects/Thesis/DATA/census/sPlot_data.csv")
x <- rnorm(100)
y <- sample(c('y', 'b'), 100, replace=T)
x
y
y <- factor(sample(c('y', 'b'), 100, replace=T))
y
data <- data.frame(subsp=y,
habitat_var=x)
glm(subsp ~ habitat_var, data=x, family='binomial')
glm(subsp ~ habitat_var, data=data, family='binomial')
m1 <- glm(subsp ~ habitat_var, data=data, family='binomial')
summary(m1)
plot(x, y)
y
as.numeric(y)
